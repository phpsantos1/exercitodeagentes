import React, { useState, useRef, useEffect } from 'react';
import { 
  Bot, 
  X, 
  Send, 
  User, 
  Phone, 
  Mail, 
  Building, 
  CreditCard,
  CheckCircle,
  ArrowRight,
  MessageCircle
} from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'bot' | 'user';
  timestamp: Date;
  options?: string[];
  showForm?: 'pre-cadastro' | 'cadastro-final';
}

interface PreCadastroData {
  nome: string;
  whatsapp: string;
  email: string;
  interesse: string;
  tipoNegocio: string;
}

interface CadastroFinalData {
  nomeCompleto: string;
  whatsapp: string;
  email: string;
  cnpjCpf: string;
  endereco: string;
  cidade: string;
  estado: string;
  cep: string;
  produtoEscolhido: string;
  formaPagamento: string;
  termoAceite: boolean;
}

const EssencialBotChat: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [currentFlow, setCurrentFlow] = useState<'initial' | 'interested' | 'ready-to-buy'>('initial');
  const [showPreCadastro, setShowPreCadastro] = useState(false);
  const [showCadastroFinal, setShowCadastroFinal] = useState(false);
  const [preCadastroData, setPreCadastroData] = useState<PreCadastroData>({
    nome: '',
    whatsapp: '',
    email: '',
    interesse: '',
    tipoNegocio: ''
  });
  const [cadastroFinalData, setCadastroFinalData] = useState<CadastroFinalData>({
    nomeCompleto: '',
    whatsapp: '',
    email: '',
    cnpjCpf: '',
    endereco: '',
    cidade: '',
    estado: '',
    cep: '',
    produtoEscolhido: '',
    formaPagamento: '',
    termoAceite: false
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setTimeout(() => {
        addBotMessage(
          "Ol√°! Sou o EssencialBot, seu assistente de automa√ß√£o inteligente do Ex√©rcito de Agentes. ü§ñ\n\nEstou aqui para ajudar voc√™ a transformar seu neg√≥cio com nossas solu√ß√µes de IA. Como posso ajud√°-lo hoje?",
          [
            "Quero conhecer os servi√ßos",
            "Preciso de automa√ß√£o IA",
            "Servi√ßos cont√°beis",
            "Consultoria empresarial",
            "Treinamentos e cursos",
            "Acessar EssencialBot Concierge"
          ]
        );
      }, 500);
    }
  }, [isOpen]);

  const addBotMessage = (text: string, options?: string[], showForm?: 'pre-cadastro' | 'cadastro-final') => {
    const newMessage: Message = {
      id: Date.now().toString(),
      text,
      sender: 'bot',
      timestamp: new Date(),
      options,
      showForm
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const addUserMessage = (text: string) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      text,
      sender: 'user',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const simulateTyping = (callback: () => void, delay = 1500) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      callback();
    }, delay);
  };

  const handleOptionClick = (option: string) => {
    addUserMessage(option);
    setInputValue('');
    
    simulateTyping(() => {
      processUserInput(option);
    });
  };

  const handleSendMessage = () => {
    if (inputValue.trim()) {
      addUserMessage(inputValue);
      const userInput = inputValue;
      setInputValue('');
      
      simulateTyping(() => {
        processUserInput(userInput);
      });
    }
  };

  const processUserInput = (input: string) => {
    const lowerInput = input.toLowerCase();

    // Detectar acesso ao Concierge
    if (lowerInput.includes('acessar essencialbot concierge') || lowerInput.includes('concierge')) {
      addBotMessage(
        "Perfeito! Vou te direcionar para o EssencialBot Concierge, nosso assistente especializado que pode te ajudar com informa√ß√µes mais detalhadas sobre todos os nossos servi√ßos.\n\nü§ñ **EssencialBot Concierge** √© seu guia completo para:\n- Automa√ß√£o IA personalizada\n- Servi√ßos cont√°beis inteligentes\n- Consultoria empresarial expert\n- Educa√ß√£o e treinamentos\n- Personaliza√ß√£o de agentes\n\nClique no link abaixo para acessar:",
        ["üîó Acessar EssencialBot Concierge"]
      );
      return;
    }

    // Link para o Concierge
    if (lowerInput.includes('üîó acessar essencialbot concierge')) {
      window.open('https://chatgpt.com/g/g-68570ffa4eac8191960f0475b576fb77-ea-essencialbot-concierge', '_blank');
      addBotMessage(
        "Redirecionando voc√™ para o EssencialBot Concierge! üöÄ\n\nL√° voc√™ ter√° acesso a informa√ß√µes mais detalhadas e poder√° fazer consultas espec√≠ficas sobre nossos servi√ßos.\n\nPosso ajudar com mais alguma coisa aqui?",
        ["Voltar ao menu principal", "Quero mais informa√ß√µes", "Encerrar conversa"]
      );
      return;
    }

    // Detectar interesse em contratar
    if (lowerInput.includes('quero contratar') || 
        lowerInput.includes('fechar neg√≥cio') || 
        lowerInput.includes('vamos come√ßar') ||
        lowerInput.includes('aceito') ||
        lowerInput.includes('concordo')) {
      setCurrentFlow('ready-to-buy');
      addBotMessage(
        "Excelente! Vou precisar de algumas informa√ß√µes para finalizar sua contrata√ß√£o. Vou abrir nosso formul√°rio completo para voc√™.",
        [],
        'cadastro-final'
      );
      setShowCadastroFinal(true);
      return;
    }

    // Detectar interesse moderado
    if (lowerInput.includes('interessante') || 
        lowerInput.includes('gostaria de saber mais') ||
        lowerInput.includes('me interessou') ||
        lowerInput.includes('quero mais informa√ß√µes') ||
        currentFlow === 'initial') {
      
      if (lowerInput.includes('automa√ß√£o') || lowerInput.includes('quero conhecer') || lowerInput.includes('preciso de automa√ß√£o')) {
        setCurrentFlow('interested');
        addBotMessage(
          "Perfeito! Nossa automa√ß√£o IA com EssencialBot √© revolucion√°ria. Oferecemos:\n\nüîπ **N√≠vel 2 - Integrado** (R$ 297/m√™s)\n- EssencialBot personalizado\n- Integra√ß√£o Google Sheets\n- Automa√ß√£o Make/Zapier\n- Relat√≥rios autom√°ticos\n\nüîπ **N√≠vel 3 - Avan√ßado** (R$ 497/m√™s)\n- Machine Learning avan√ßado\n- An√°lise preditiva\n- Multi-plataformas\n- Consultoria inclu√≠da\n\nQual n√≠vel desperta mais seu interesse?",
          ["N√≠vel 2 - Integrado", "N√≠vel 3 - Avan√ßado", "Quero mais detalhes", "Gostaria de uma proposta", "üîó Consultar Agente"]
        );
      } else if (lowerInput.includes('cont√°bil') || lowerInput.includes('contabilidade')) {
        setCurrentFlow('interested');
        addBotMessage(
          "Somos um escrit√≥rio de contabilidade especializado em empresas! üìä\n\nüè¢ **Nossos Servi√ßos Completos:**\n- Abertura de empresas\n- Contabilidade mensal\n- Obriga√ß√µes fiscais (SPED, ECF, DEFIS)\n- Departamento pessoal\n- Planejamento tribut√°rio\n- Relat√≥rios gerenciais\n- Compliance e auditoria\n\nü§ñ **Diferencial**: Tudo automatizado com EssencialBot para maior agilidade e precis√£o!\n\nQual servi√ßo cont√°bil mais interessa sua empresa?",
          ["Abertura de empresa", "Contabilidade mensal", "Planejamento tribut√°rio", "Quero uma proposta", "üîó Consultar Contabilidade Inteligente"]
        );
      } else if (lowerInput.includes('consultoria')) {
        setCurrentFlow('interested');
        addBotMessage(
          "Nossa consultoria empresarial √© completa e vai al√©m da IA! üíº\n\nüéØ **√Åreas de Atua√ß√£o:**\n- Gest√£o empresarial e planejamento estrat√©gico\n- Fluxo de caixa e controle financeiro\n- Recupera√ß√£o judicial e reestrutura√ß√£o\n- Busca de cr√©dito em factorings\n- Fus√µes e aquisi√ß√µes\n- Consultoria com IA e automa√ß√£o\n\n‚úÖ Atendemos desde empresas em crescimento at√© casos cr√≠ticos de recupera√ß√£o.\n\nQual √°rea da consultoria mais se adequa √† sua necessidade?",
          ["Gest√£o empresarial", "Fluxo de caixa", "Recupera√ß√£o judicial", "Busca de cr√©dito", "Consultoria com IA", "üîó Consultar Expert"]
        );
      } else if (lowerInput.includes('treinamento') || lowerInput.includes('curso')) {
        setCurrentFlow('interested');
        addBotMessage(
          "Nossos treinamentos s√£o focados em √°reas cont√°beis, financeiras e tecnol√≥gicas! üéì\n\nüìö **√Åreas de Capacita√ß√£o:**\n\nü§ñ **IA Empresarial**: Fundamentos de IA, Chatbots, Machine Learning\nüìä **Contabilidade Digital**: Contabilidade 4.0, SPED, An√°lise de Balan√ßos\nüéØ **Controladoria**: Controles Internos, Auditoria, Compliance\nüí∞ **Gest√£o Financeira**: Fluxo de Caixa, An√°lise Financeira, Or√ßamento\n\nTodos com certifica√ß√£o e projetos pr√°ticos. Qual √°rea mais interessa sua equipe?",
          ["IA Empresarial", "Contabilidade Digital", "Controladoria", "Gest√£o Financeira", "Todos os cursos", "üîó Consultar Educa√ß√£o Pr√≥"]
        );
      } else {
        addBotMessage(
          "Vou te apresentar nossas principais solu√ß√µes:\n\nü§ñ **Automa√ß√£o IA**: EssencialBot personalizado para seu neg√≥cio\nüìä **Escrit√≥rio Cont√°bil**: Servi√ßos completos para empresas\nüíº **Consultoria**: Gest√£o, recupera√ß√£o judicial, cr√©dito\nüéì **Treinamentos**: Contabilidade, controladoria e IA\n\nQual √°rea desperta mais seu interesse?",
          ["Automa√ß√£o IA", "Servi√ßos Cont√°beis", "Consultoria", "Treinamentos", "üîó Acessar EssencialBot Concierge"]
        );
      }
      
      // Ap√≥s mostrar interesse, sugerir pr√©-cadastro
      setTimeout(() => {
        addBotMessage(
          "Para personalizar melhor nossa conversa e enviar materiais espec√≠ficos, posso coletar algumas informa√ß√µes b√°sicas suas?",
          ["Sim, pode coletar", "Prefiro continuar conversando", "Quero falar com um humano"]
        );
      }, 3000);
      
    } else if (lowerInput.includes('sim, pode coletar') || lowerInput.includes('pode coletar')) {
      addBotMessage(
        "Perfeito! Vou abrir um formul√°rio r√°pido para conhec√™-lo melhor e personalizar nosso atendimento.",
        [],
        'pre-cadastro'
      );
      setShowPreCadastro(true);
    } else if (lowerInput.includes('üîó consultar')) {
      // Detectar qual GPT acessar baseado no texto
      if (lowerInput.includes('agente')) {
        window.open('https://chatgpt.com/g/g-685716af22f881918330545239763a46-ea-triagem-de-ia-planos-2-e-3', '_blank');
        addBotMessage("Redirecionando para consulta sobre Agente! ü§ñ");
      } else if (lowerInput.includes('contabilidade inteligente')) {
        window.open('https://chatgpt.com/g/g-68571184fa60819187a1c1a4c459c153-ea-triagem-contabil', '_blank');
        addBotMessage("Redirecionando para consulta sobre Contabilidade Inteligente! üìä");
      } else if (lowerInput.includes('expert')) {
        window.open('https://chatgpt.com/g/g-685713a0a450819181b59fee416ebf2f-ea-triagem-consultoria-empresarial', '_blank');
        addBotMessage("Redirecionando para consulta com Expert em Consultoria! üíº");
      } else if (lowerInput.includes('educa√ß√£o pr√≥')) {
        window.open('https://chatgpt.com/g/g-6857154789bc8191bc1d7840adae7382-ea-triagem-educacao-pro', '_blank');
        addBotMessage("Redirecionando para consulta sobre Educa√ß√£o Pr√≥! üéì");
      }
    } else if (lowerInput.includes('n√≠vel 2') || lowerInput.includes('integrado')) {
      addBotMessage(
        "Excelente escolha! O N√≠vel 2 - Integrado √© perfeito para empresas que querem:\n\n‚úÖ EssencialBot personalizado para seu neg√≥cio\n‚úÖ Integra√ß√£o autom√°tica com Google Sheets\n‚úÖ Automa√ß√µes Make/Zapier\n‚úÖ Relat√≥rios autom√°ticos\n‚úÖ Suporte priorit√°rio\n\n**Investimento: R$ 297/m√™s**\n\nEste n√≠vel j√° resolve 80% das necessidades de automa√ß√£o. Gostaria de uma demonstra√ß√£o pr√°tica?",
        ["Quero uma demo", "Vamos fechar neg√≥cio", "Preciso pensar", "üîó Consultar Agente"]
      );
    } else if (lowerInput.includes('n√≠vel 3') || lowerInput.includes('avan√ßado')) {
      addBotMessage(
        "Perfeita escolha! O N√≠vel 3 - Avan√ßado √© nossa solu√ß√£o premium:\n\nüöÄ Tudo do N√≠vel 2 MAIS:\n‚úÖ EssencialBot com Machine Learning\n‚úÖ An√°lise preditiva avan√ßada\n‚úÖ Multi-plataformas\n‚úÖ Consultoria empresarial inclu√≠da\n‚úÖ API personalizada\n\n**Investimento: R$ 497/m√™s**\n\n√â a solu√ß√£o completa para empresas que querem estar na vanguarda da IA. Pronto para come√ßar?",
        ["Sim, vamos come√ßar!", "Quero uma proposta", "Preciso de mais detalhes", "üîó Consultar Agente"]
      );
    } else {
      // Resposta gen√©rica inteligente
      addBotMessage(
        "Entendo! Como EssencialBot, estou aqui para esclarecer qualquer d√∫vida sobre nossas solu√ß√µes de IA, contabilidade e consultoria.\n\nPosso ajudar voc√™ com informa√ß√µes espec√≠ficas sobre:\n- Pre√ßos e planos\n- Funcionalidades t√©cnicas\n- Casos de sucesso\n- Demonstra√ß√µes pr√°ticas\n\nO que gostaria de saber?",
        ["Ver pre√ßos", "Como funciona", "Casos de sucesso", "Quero uma demo", "üîó Acessar EssencialBot Concierge"]
      );
    }
  };

  const handlePreCadastroSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Simular envio para Google Sheets
    console.log('Pr√©-cadastro enviado:', preCadastroData);
    
    // Aqui voc√™ integraria com Google Sheets via webhook
    // await fetch('/api/pre-cadastro', { method: 'POST', body: JSON.stringify(preCadastroData) });
    
    setShowPreCadastro(false);
    addBotMessage(
      `Obrigado, ${preCadastroData.nome}! üéâ\n\nSuas informa√ß√µes foram registradas com sucesso. Vou enviar materiais personalizados sobre ${preCadastroData.interesse} para seu WhatsApp e email.\n\nEm breve, nossa equipe entrar√° em contato para uma conversa mais detalhada. Enquanto isso, posso responder mais alguma d√∫vida?`,
      ["Quero saber mais sobre pre√ßos", "Como √© o processo de implementa√ß√£o?", "Tenho outras d√∫vidas", "üîó Acessar EssencialBot Concierge"]
    );
  };

  const handleCadastroFinalSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!cadastroFinalData.termoAceite) {
      alert('Por favor, aceite os termos de servi√ßo para continuar.');
      return;
    }
    
    // Simular envio para sistema principal
    console.log('Cadastro final enviado:', cadastroFinalData);
    
    // Aqui voc√™ integraria com seu backend/ERP
    // await fetch('/api/cadastro-final', { method: 'POST', body: JSON.stringify(cadastroFinalData) });
    
    setShowCadastroFinal(false);
    addBotMessage(
      `üéâ **PARAB√âNS, ${cadastroFinalData.nomeCompleto}!**\n\nSeu cadastro foi finalizado com sucesso! Voc√™ agora faz parte do Ex√©rcito de Agentes.\n\nüìã **Pr√≥ximos passos:**\n1. Voc√™ receber√° um email de confirma√ß√£o\n2. Nossa equipe entrar√° em contato em at√© 2h\n3. Agendaremos o onboarding do seu EssencialBot\n\nüí¨ **Grupo VIP**: [Clique aqui para entrar no grupo exclusivo de clientes](https://wa.me/5511911757113)\n\nBem-vindo √† revolu√ß√£o da automa√ß√£o inteligente! üöÄ`,
      ["Entrar no grupo VIP", "Quando come√ßa a implementa√ß√£o?", "üîó Acessar EssencialBot Concierge"]
    );
  };

  return (
    <>
      {/* Chat Button */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 z-50 p-4 bg-gradient-to-r from-blue-500 to-cyan-400 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 animate-pulse hover:shadow-blue-400/50"
        >
          <MessageCircle className="h-6 w-6 text-white" />
        </button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 z-50 w-96 h-[600px] bg-gray-900/95 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl overflow-hidden flex flex-col">
          {/* Header */}
          <div className="p-4 bg-gradient-to-r from-blue-500 to-cyan-400 flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-white/20 rounded-full">
                <Bot className="h-6 w-6 text-white" />
              </div>
              <div className="flex flex-col">
                <span className="font-semibold text-white">EssencialBot</span>
                <span className="text-xs text-blue-100">Ex√©rcito de Agentes ‚Ä¢ Online</span>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="text-white hover:text-gray-200 transition-colors"
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          {/* Messages Area */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-[80%] p-3 rounded-lg ${
                  message.sender === 'user' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-800 text-gray-100 border border-gray-700'
                }`}>
                  <div className="flex items-start space-x-2">
                    {message.sender === 'bot' && (
                      <Bot className="h-4 w-4 text-blue-300 mt-0.5 flex-shrink-0" />
                    )}
                    {message.sender === 'user' && (
                      <User className="h-4 w-4 text-white mt-0.5 flex-shrink-0" />
                    )}
                    <div className="flex-1">
                      <p className="text-sm whitespace-pre-line">{message.text}</p>
                      
                      {/* Options */}
                      {message.options && (
                        <div className="mt-3 space-y-2">
                          {message.options.map((option, index) => (
                            <button
                              key={index}
                              onClick={() => handleOptionClick(option)}
                              className="block w-full text-left px-3 py-2 bg-blue-500/20 hover:bg-blue-500/30 rounded-lg text-sm transition-colors border border-blue-400/30 hover:border-blue-400/50"
                            >
                              {option}
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {/* Typing Indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-gray-800 border border-gray-700 p-3 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Bot className="h-4 w-4 text-blue-300" />
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="p-4 border-t border-gray-700">
            <div className="flex space-x-2">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Digite sua mensagem..."
                className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-sm focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white placeholder-gray-400"
              />
              <button
                onClick={handleSendMessage}
                className="px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-400 rounded-lg hover:from-blue-600 hover:to-cyan-500 transition-all duration-300"
              >
                <Send className="h-4 w-4 text-white" />
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Pr√©-cadastro Modal */}
      {showPreCadastro && (
        <div className="fixed inset-0 z-[60] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4">
          <div className="bg-gray-900 rounded-2xl border border-blue-400/30 p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <Bot className="h-6 w-6 text-blue-300" />
                <h3 className="text-xl font-bold text-white">PR√â-CADASTRO R√ÅPIDO</h3>
              </div>
              <button
                onClick={() => setShowPreCadastro(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            <form onSubmit={handlePreCadastroSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">NOME</label>
                <input
                  type="text"
                  required
                  value={preCadastroData.nome}
                  onChange={(e) => setPreCadastroData({...preCadastroData, nome: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  placeholder="Seu nome completo"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">WHATSAPP</label>
                <input
                  type="tel"
                  required
                  value={preCadastroData.whatsapp}
                  onChange={(e) => setPreCadastroData({...preCadastroData, whatsapp: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  placeholder="(11) 99999-9999"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">E-MAIL</label>
                <input
                  type="email"
                  required
                  value={preCadastroData.email}
                  onChange={(e) => setPreCadastroData({...preCadastroData, email: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  placeholder="seu@email.com"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">√ÅREA DE INTERESSE</label>
                <select
                  required
                  value={preCadastroData.interesse}
                  onChange={(e) => setPreCadastroData({...preCadastroData, interesse: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                >
                  <option value="">Selecione sua √°rea de interesse</option>
                  <option value="Automa√ß√£o IA">Automa√ß√£o IA</option>
                  <option value="Servi√ßos Cont√°beis">Servi√ßos Cont√°beis</option>
                  <option value="Consultoria Empresarial">Consultoria Empresarial</option>
                  <option value="Treinamentos">Treinamentos e Cursos</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">TIPO DE NEG√ìCIO</label>
                <input
                  type="text"
                  required
                  value={preCadastroData.tipoNegocio}
                  onChange={(e) => setPreCadastroData({...preCadastroData, tipoNegocio: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  placeholder="Ex: E-commerce, Consultoria, Ind√∫stria..."
                />
              </div>

              <button
                type="submit"
                className="w-full py-3 bg-gradient-to-r from-blue-500 to-cyan-400 rounded-lg font-semibold hover:from-blue-600 hover:to-cyan-500 transition-all duration-300 text-white"
              >
                ENVIAR INFORMA√á√ïES
              </button>
            </form>
          </div>
        </div>
      )}

      {/* Cadastro Final Modal */}
      {showCadastroFinal && (
        <div className="fixed inset-0 z-[60] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4">
          <div className="bg-gray-900 rounded-2xl border border-blue-400/30 p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <Bot className="h-6 w-6 text-blue-300" />
                <h3 className="text-xl font-bold text-white">FINALIZAR CONTRATA√á√ÉO</h3>
              </div>
              <button
                onClick={() => setShowCadastroFinal(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            <form onSubmit={handleCadastroFinalSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">NOME COMPLETO</label>
                  <input
                    type="text"
                    required
                    value={cadastroFinalData.nomeCompleto}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, nomeCompleto: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">WHATSAPP</label>
                  <input
                    type="tel"
                    required
                    value={cadastroFinalData.whatsapp}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, whatsapp: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">E-MAIL</label>
                  <input
                    type="email"
                    required
                    value={cadastroFinalData.email}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, email: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">CNPJ/CPF</label>
                  <input
                    type="text"
                    required
                    value={cadastroFinalData.cnpjCpf}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, cnpjCpf: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">ENDERE√áO</label>
                <input
                  type="text"
                  required
                  value={cadastroFinalData.endereco}
                  onChange={(e) => setCadastroFinalData({...cadastroFinalData, endereco: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">CIDADE</label>
                  <input
                    type="text"
                    required
                    value={cadastroFinalData.cidade}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, cidade: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">ESTADO</label>
                  <input
                    type="text"
                    required
                    value={cadastroFinalData.estado}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, estado: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">CEP</label>
                  <input
                    type="text"
                    required
                    value={cadastroFinalData.cep}
                    onChange={(e) => setCadastroFinalData({...cadastroFinalData, cep: e.target.value})}
                    className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">PRODUTO ESCOLHIDO</label>
                <select
                  required
                  value={cadastroFinalData.produtoEscolhido}
                  onChange={(e) => setCadastroFinalData({...cadastroFinalData, produtoEscolhido: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                >
                  <option value="">Selecione o produto</option>
                  <option value="N√≠vel 2 - Integrado (R$ 297/m√™s)">N√≠vel 2 - Integrado (R$ 297/m√™s)</option>
                  <option value="N√≠vel 3 - Avan√ßado (R$ 497/m√™s)">N√≠vel 3 - Avan√ßado (R$ 497/m√™s)</option>
                  <option value="Servi√ßos Cont√°beis">Servi√ßos Cont√°beis</option>
                  <option value="Consultoria Empresarial">Consultoria Empresarial</option>
                  <option value="Treinamentos">Treinamentos e Cursos</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">FORMA DE PAGAMENTO</label>
                <select
                  required
                  value={cadastroFinalData.formaPagamento}
                  onChange={(e) => setCadastroFinalData({...cadastroFinalData, formaPagamento: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-white"
                >
                  <option value="">Selecione a forma de pagamento</option>
                  <option value="Cart√£o de Cr√©dito">Cart√£o de Cr√©dito</option>
                  <option value="Boleto Banc√°rio">Boleto Banc√°rio</option>
                  <option value="PIX">PIX</option>
                  <option value="Transfer√™ncia Banc√°ria">Transfer√™ncia Banc√°ria</option>
                </select>
              </div>

              <div className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  id="termoAceite"
                  required
                  checked={cadastroFinalData.termoAceite}
                  onChange={(e) => setCadastroFinalData({...cadastroFinalData, termoAceite: e.target.checked})}
                  className="mt-1"
                />
                <label htmlFor="termoAceite" className="text-sm text-gray-300">
                  Aceito os termos de servi√ßo e autorizo o processamento dos meus dados pessoais conforme a LGPD. Concordo em receber comunica√ß√µes sobre os servi√ßos contratados.
                </label>
              </div>

              <button
                type="submit"
                className="w-full py-3 bg-gradient-to-r from-blue-500 to-cyan-400 rounded-lg font-semibold hover:from-blue-600 hover:to-cyan-500 transition-all duration-300 text-white flex items-center justify-center space-x-2"
              >
                <CheckCircle className="h-5 w-5" />
                <span>FINALIZAR CONTRATA√á√ÉO</span>
              </button>
            </form>
          </div>
        </div>
      )}
    </>
  );
};

export default EssencialBotChat;